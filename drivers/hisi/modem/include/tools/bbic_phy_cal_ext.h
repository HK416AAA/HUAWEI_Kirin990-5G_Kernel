/*
 * Huawei Technologies Sweden AB (C), 2001-2019
 * @author    Automatically generated by DAISY
 * @version
 * @date      2017-04-28 15:27:40
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 */
#ifndef BBIC_PHY_CAL_EXT_H
#define BBIC_PHY_CAL_EXT_H

/*
 * 1. Other files included
*/
#include "vos.h"
#include "bbic_cal_comm_ext.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
#pragma pack(push, 4)

/*
 * 2. Macro definitions
 */

/*
 * 3. Enumerations declarations
 */

enum BBIC_PHY_CalMsgType {
    /* to generate/shut-down TX modulation source, only valid under ct mode */
    ID_BBIC_GPHY_CAL_TX_FRAME_REQ = 0x1101, /**< @sa BBIC_GPHY_CalTxReq */
    ID_BBIC_WPHY_CAL_TX_MODU_REQ  = 0x1102, /**< @sa BBIC_UPHY_CAL_TX_MODU_REQ_STRU */
    ID_BBIC_CPHY_CAL_TX_MODU_REQ  = 0x1103, /**< @sa BBIC_CPHY_CalTxModuReq */
    ID_BBIC_LPHY_CAL_TX_MODU_REQ  = 0x1104, /**< @sa BBIC_LPHY_CalTxModuReq */

    ID_BBIC_GPHY_CAL_RX_RSSI_REQ = 0x1105, /**< @sa BBIC_PHY_CalRxRssiReq */
    ID_BBIC_WPHY_CAL_RX_RSSI_REQ = 0x1106, /**< @sa BBIC_PHY_CalRxRssiReq */
    ID_BBIC_CPHY_CAL_RX_RSSI_REQ = 0x1107, /**< @sa BBIC_PHY_CalRxRssiReq */
    ID_BBIC_LPHY_CAL_RX_RSSI_REQ = 0x1108, /**< @sa BBIC_PHY_CalRxRssiReq */

    ID_BBIC_NPHY_CAL_TX_MODU_REQ = 0x1109, /**< @sa BBIC_NPHY_CalTxModuReq */

    ID_BBIC_GPHY_CAL_GETX_APC_REQ = 0x1120,

    ID_BBIC_WPHY_CAL_DCXO_TEMP_REQ = 0x1130,

    ID_BBIC_PHY_CAL_BUTT
};
typedef VOS_UINT16 BBIC_PHY_CalMsgTypeUint16;

enum PHY_BBIC_CalMsgType {
    ID_GPHY_BBIC_CAL_TX_FRAME_CNF = 0x2101, /**< @sa PHY_BBIC_CalMsgCnf */
    ID_WPHY_BBIC_CAL_TX_MODU_CNF  = 0x2102, /**< @sa PHY_BBIC_CalMsgCnf */
    ID_CPHY_BBIC_CAL_TX_MODU_CNF  = 0x2103, /**< @sa PHY_BBIC_CalMsgCnf */
    ID_LPHY_BBIC_CAL_TX_MODU_CNF  = 0x2104, /**< @sa PHY_BBIC_CalMsgCnf */

    ID_GPHY_BBIC_CAL_MRX_IND = 0x2105, /**< @  */

    ID_NPHY_BBIC_CAL_TX_MODU_CNF = 0x2106, /**< @sa PHY_BBIC_CalMsgCnf */

    ID_GPHY_BBIC_CAL_RX_RSSI_CNF = 0x2111, /**< @sa PHY_BBIC_CalRxRssiInd */
    ID_WPHY_BBIC_CAL_RX_RSSI_CNF = 0x2112, /**< @sa PHY_BBIC_CalRxRssiInd */
    ID_CPHY_BBIC_CAL_RX_RSSI_CNF = 0x2113, /**< @sa PHY_BBIC_CalRxRssiInd */
    ID_LPHY_BBIC_CAL_RX_RSSI_CNF = 0x2114, /**< @sa PHY_BBIC_CalRxRssiInd */

    ID_GPHY_BBIC_CAL_GETX_APC_IND = 0x2120,

    ID_WPHY_BBIC_CAL_DCXO_TEMP_CNF = 0x2130,

    ID_PHY_BBIC_CAL_BUTT
};
typedef VOS_UINT16 PHY_BBIC_CalMsgTypeUint16;

enum BBIC_CAL_WphyDcxoSet {
    BBIC_CAL_WPHY_DCXO_SET_DISABLE = 0,
    BBIC_CAL_WPHY_DCXO_SET_ENABLE,

    BBIC_CAL_WPHY_DCXO_SET_BUTT
};
typedef VOS_UINT16 BBIC_CAL_WphyDcxoSetUint16;


/*
 * Description: Wcdma Upa Config
 */
typedef struct {
    VOS_UINT16 uhwBec;
    VOS_UINT16 uhwBed1;
    VOS_UINT16 uhwBed2;
    VOS_UINT16 uhwBc;
    VOS_UINT16 uhwBd;
    VOS_UINT16 uhwTxSlotFormat; /* < Slot Format,Qpsk or 16Qam */
    VOS_UINT16 uhwTxChanNum;    /* < Tx chan Num, Max value is 4 */
    VOS_UINT16 uhwRsv;
} BBIC_CAL_RF_DEBUG_WCDMA_UPA_PARA_STRU;

/*
 * Description: Wcdma DPA Config
 */
typedef struct {
    VOS_UINT16 uhwBc;
    VOS_UINT16 uhwBd;
    VOS_UINT16 uhwBhs;
    VOS_UINT16 uhwRsv;
} BBIC_CAL_RF_DEBUG_WCDMA_DPA_PARA_STRU;

/*
 * Description: Wcdma DPA Config
 */
typedef struct {
    VOS_UINT16 uhwUpaEnable; /* < Upa Enable,1--Enable,0--Disable */
    VOS_UINT16 uhwDpaEnable; /* < Dpa Enable,1--Enable,0--Disable */
    BBIC_CAL_RF_DEBUG_WCDMA_UPA_PARA_STRU stWcdmaUpaPara;
    BBIC_CAL_RF_DEBUG_WCDMA_DPA_PARA_STRU stWcdmaDpaPara;
} BBIC_CAL_RF_DEBUG_WCDMA_PARA_STRU;



/*
 * Description: LTE specific cal Tx APC parameters.
 */
typedef struct {
    VOS_UINT8 ucRbStart; /* < Freq comp for edge RB */
    VOS_UINT8 ucRbNum;   /* < Freq comp for edge RB */
    VOS_UINT8 aucRsv[2];
} LTE_TX_PARA_STRU;


typedef struct {
    NR_SCS_TYPE_COMM_ENUM_UINT8 enScsType; /* < 子载波间隔 */
    VOS_UINT8                   ucRsv;
    WAVEFORM_TYPE_ENUM_UINT16   nrWaveType; /* NR模调制信号使用，波形类型，CPOFDM或者DFT S OFDM */
    VOS_UINT16                  uhwRbStart; /* < 非信令下只支持type1 - start RB */
    VOS_UINT16                  uhwRbNum;   /* < 非信令下只支持type1 - numbers of RB */
} NR_TX_MODU_PARA_STRU;

/*
 * Description: RX Rssi Ind
 */
typedef struct {
    VOS_UINT32 uwErrorCode;
    VOS_UINT32 uwRsv;
    VOS_INT16  ashwRssi[RFHAL_CAL_MAX_ANT_NUM];
} BBIC_CAL_RF_DEBUG_RX_RSSI_IND_PARA_STRU;


/*
 * Description: TX any step config for a frequency
 */
typedef struct {
    VOS_UINT32            freqInfo;     /**< Center freqency of each band, the unit is Khz */
    BANDWIDTH_ENUM_UINT16 bandWidth;    /**< Bandwidth */
    VOS_UINT16            apcTblNum;   /**< APC TABLE NUM  1 / 2  */
    VOS_UINT16            stepNum[2]; /**< Step Num */
} BBIC_CAL_GetxFreqConfig;

/*
 * Description: TX any path config
 */
typedef struct {
    RAT_MODE_ENUM_UINT16 ratMode;      /**< Rat Mode */
    BAND_ENUM_UINT16     band;         /**< Band No. */
    VOS_UINT16           txPathIndex; /**< Tx Path Index */
    VOS_UINT16           freqNum;     /**< Freq Num */
    VOS_UINT32           mrxLowGainMax;
} BBIC_CAL_GetxPathConfig;

typedef struct {
    TX_POWER_CFG_UNION powerConfig; /**< Selector(enPowerParaType) Power config */
    TX_PA_CONFIG_STRU  paPara;      /**< PA VCC and bias config */
} BBIC_CAL_GetxStep;

typedef struct {
    VOS_UINT16 pathNum; /**< Path Config num */
    VOS_UINT16 freqNum; /**< Freq Config num */
    VOS_UINT16 stepNum; /**< Step Config num */
    VOS_UINT16 rsv;
    /*
     * Data Segment, ausData, format:
     * BBIC_CAL_GetxPathConfig    astPathConfig[n];      Any Path cfg, n=usPathConfigNum
     * BBIC_CAL_GetxFreqConfig    astFreqConfig[n];      Any Freq cfg, n=usFreqConfigNum
     * BBIC_CAL_GetxStep           astStepData[n];        Total Step Data Cfg
     */
} BBIC_CAL_GphyGeTxStartReqPara;

typedef struct {
    VOS_UINT16 errorCode;
    VOS_UINT16 stepNum;
} BBA_CAL_GphyGetxPathResultPara;

typedef struct {
    VOS_UINT16                         errorCode; /**< uhwErrorCode */
    VOS_UINT16                         pathNum;   /**< Rsv */
    BBA_CAL_GphyGetxPathResultPara     pathPara[8];
    /*
     * Data Segment, ausData, format:
     * VOS_UINT32                      auwMrxData[n];                   * n = uhwMrxNum
     */
} BBIC_CAL_GphyGeTxResultIndPara;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU    componentID;
    BBIC_CAL_GphyGeTxStartReqPara para;
} BBIC_CAL_GphyTxApcReq;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU     componentID;
    BBIC_CAL_GphyGeTxResultIndPara para;
} BBIC_CAL_GphyTxApcInd;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU       componentID;
    BBIC_CAL_RF_DEBUG_G_TX_PARA_STRU para;
} BBIC_GPHY_CalTxReq;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU        componentID;
    VOS_UINT16                        moduOnOff; /**< 1--Modulation on, 0--off */
    MODU_TYPE_ENUM_UINT16             modType;    /**< Modulation Type */
    BBIC_CAL_RF_DEBUG_WCDMA_PARA_STRU wcdmaPara;
} BBIC_WPHY_CalTxModuReq;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU componentID;

    VOS_UINT16                 moduOnOff; /**< 1--Modulation on, 0--off */
    MODU_TYPE_ENUM_UINT16      modType;    /**< Modulation Type */
} BBIC_CPHY_CalTxModuReq;


typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU componentID;

    VOS_UINT16                 moduOnOff; /**< 1--Modulation on, 0--off */
    MODU_TYPE_ENUM_UINT16      modType;   /**< Modulation Type */
    BANDWIDTH_ENUM_UINT16      bandWith;   /**< BandWidth */
    VOS_UINT16                 rsv;
    LTE_TX_PARA_STRU           lteRbPara;
} BBIC_LPHY_CalTxModuReq;

/*
 * Description: Msg cnf struct
 */
typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU componentID;
    VOS_UINT32                 errorCode;
} PHY_BBIC_CalMsgCnf;

/*
 * Description: RX REQ PARA
 */
typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU         componentID;
    BBIC_CAL_RF_DEBUG_COMMON_PARA_STRU commonInfo;
    BBIC_CAL_GSM_RX_MODE_ENUM_UINT8    gsmRxMode;
    BBIC_CAL_RX_AGC_MODE_ENUM_UINT8    rxAgcMode;
    VOS_UINT8                          antCfgMap; /**< BIT0--ANT0,BIT1--ANT1 */
    VOS_UINT8                          rsv;
} BBIC_PHY_CalRxRssiReq;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU              componentID;
    BBIC_CAL_RF_DEBUG_RX_RSSI_IND_PARA_STRU para;
} PHY_BBIC_CalRxRssiInd;

/* b5010 */
typedef struct {
    VOS_UINT32                    txFreqInfo; /**< Tx Frequence info, unit is khz */
    BANDWIDTH_ENUM_UINT16     bandWith;   /**< BandWidth */
    MODU_TYPE_ENUM_UINT16     modType;    /**< valid under modulation signal */
    WAVEFORM_TYPE_ENUM_UINT16 waveType;   /**< valid under modulation signal */
    VOS_UINT8                 duplexType;
    VOS_UINT8                 rsv;
    NR_TX_MODU_PARA_STRU      txModuPara;
} BBIC_CAL_RfDebugNrPara;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU     componentID;
    VOS_UINT16                     ccIdx;
    VOS_UINT16                     moduOnOff; /**< 1--Modulation on, 0--off */
    BBIC_CAL_RfDebugNrPara         nrPara;
} BBIC_NPHY_CalTxModuReq;

typedef struct {
    BBIC_CAL_WphyDcxoSetUint16         setType; /* DCXO保护是否使能 */
    VOS_UINT16                         band;    /* 测试BAND */
    VOS_UINT32                         txArfcn;   /* 测试频点号，也就是通道号 */
} BBIC_CAL_WphyDcxoReqPara;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU       componentID;
    BBIC_CAL_WphyDcxoReqPara         dcxoPara; /* DCXO结构体参数 */
} BBIC_CAL_WphyTxDcxoTempReq;

typedef struct {
    VOS_MSG_HEADER
    BBIC_CAL_COMPONENT_ID_STRU componentID;
    VOS_UINT32                 errorCode; /* 错误码 */
} WPHY_CAL_BbicTxDcxoTempCnf;



/*
 * 7. OTHER declarations
 */

/*
 * 8. Global  declaration
 */

/*
 * 9. Function declarations
 */

#pragma pack(pop)

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif
